@page "/categories"
@inject UseCases.UseCaseInterfaces.IViewCategoriesUseCase ViewCategoriesUseCase
@inject NavigationManager NavigationManager
@inject UseCases.UseCaseInterfaces.IDeleteCategoryUseCase DeleteCategoryUseCase

<h3>Manage Categories</h3>

@if(categories is not null)
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var category in categories)
            {
                <tr>
                    <td>@category.Name</td>
                    <td>@category.Description</td>
                    <td>
                        <button type="button" class="btn btn-primary" @onclick="() => EditCategory(category)">Edit</button>
                        <button type="button" class="btn btn-danger" @onclick="() => DeleteCategory(category.CategoryId)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
<br>
<button type="button"@onclick="OnClickAddCategory" class="btn btn-success">Add Category</button>

@code {
    private List<Category> categories;
    
    protected override void OnInitialized()
    {
        base.OnInitialized();
        LoadCategories();
    }

    private void OnClickAddCategory()
    {
        NavigationManager.NavigateTo("/addcategory");
    }

    private void EditCategory(Category category)
    {
        NavigationManager.NavigateTo($"editcategory/{category.CategoryId}");
    }
    private void DeleteCategory(int categoryId)
    {
        DeleteCategoryUseCase.Execute(categoryId);
        LoadCategories();
    }

    private void LoadCategories()
    {
        categories = ViewCategoriesUseCase.Execute()?.ToList();
    }
}